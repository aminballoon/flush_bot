import cv2
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
PPP = [(669, 141, 177), (668, 142, 174), (668, 143, 175), (668, 144, 176), (668, 145, 176), 
(668, 146, 176), (668, 147, 176), (668, 148, 176), (668, 149, 176), (668, 150, 176), (668, 151, 176), (668, 152, 176), 
(667, 153, 176), (667, 154, 176), (667, 155, 176), (667, 156, 176), (667, 157, 176), (667, 158, 176), (667, 159, 176), 
(667, 160, 177), (667, 161, 177), (667, 162, 177), (667, 163, 177), (666, 164, 177), (666, 165, 177), (666, 166, 177), 
(666, 167, 177), (666, 168, 177), (666, 169, 177), (666, 170, 177), (666, 171, 177), (666, 172, 177), (666, 173, 177), 
(666, 174, 177), (665, 175, 177), (665, 176, 177), (665, 177, 177), (665, 178, 177), (665, 179, 177), (665, 180, 177), 
(665, 181, 177), (665, 182, 177), (665, 183, 177), (665, 184, 177), (665, 185, 177), (664, 186, 177), (664, 187, 177), 
(664, 188, 177), (664, 189, 177), (664, 190, 177), (664, 191, 177), (664, 192, 179), (664, 193, 179), (664, 194, 179), 
(664, 195, 179), (664, 196, 179), (663, 197, 178), (663, 198, 178), (663, 199, 178), (662, 200, 180), (662, 201, 180), 
(662, 202, 180), (661, 203, 180), (661, 204, 180), (661, 205, 180), (660, 206, 180), (660, 207, 180), (660, 208, 179), 
(659, 209, 180), (659, 210, 180), (659, 211, 180), (658, 212, 180), (658, 213, 180), (658, 214, 180), (657, 215, 180), 
(657, 216, 180), (657, 217, 180), (656, 218, 180), (656, 219, 180), (656, 220, 180), (655, 221, 180), (655, 222, 180), 
(655, 223, 180), (654, 224, 181), (654, 
225, 181), (654, 226, 181), (654, 227, 181), (653, 228, 181), (653, 229, 181), (653, 230, 181), (652, 231, 181), 
(652, 232, 181), (652, 233, 181), (651, 234, 181), (651, 235, 181), (651, 236, 181), (650, 237, 181), (650, 238, 181), 
(650, 239, 181), (649, 240, 181), (649, 241, 181), (649, 242, 181), (648, 243, 181), (648, 244, 181), (648, 245, 181), 
(647, 246, 181), (647, 247, 181), (647, 248, 182), (646, 249, 182), (646, 250, 182), (646, 251, 182), (645, 252, 183), 
(645, 253, 183), (645, 254, 183), (644, 255, 183), (644, 256, 183), (644, 257, 183), (644, 258, 183), (643, 259, 183), 
(642, 260, 183), (642, 261, 183), (641, 262, 183), (641, 263, 183), (640, 264, 184), (640, 265, 184), (639, 266, 184), 
(638, 267, 184), (638, 268, 184), (637, 269, 184), (637, 270, 184), (636, 271, 185), (636, 272, 185), (635, 273, 185), 
(635, 274, 185), (634, 275, 185), (633, 276, 185), (633, 277, 185), (632, 278, 185), (632, 279, 185), (631, 280, 185), 
(631, 281, 185), (630, 282, 185), (630, 283, 185), (629, 284, 185), (628, 285, 
186), (628, 286, 186), (627, 287, 186), (627, 288, 186), (626, 289, 186), (626, 290, 186), (625, 291, 186), (624, 292, 187), 
(624, 293, 187), (623, 294, 186), (623, 295, 186), (622, 296, 188), (622, 297, 188), (621, 298, 188), (621, 299, 188), 
(620, 300, 188), (619, 301, 188), (619, 302, 188), (618, 303, 188), (618, 304, 188), (617, 305, 188), (617, 306, 188), 
(616, 307, 188), (616, 308, 188), (615, 309, 188), (614, 310, 188), (613, 311, 188), (612, 312, 188), (611, 313, 188), 
(610, 314, 188), (609, 315, 188), (609, 316, 188), (608, 317, 188), (607, 318, 188), (606, 319, 189), (605, 320, 190), 
(604, 321, 190), (603, 322, 190), (602, 323, 190), (602, 324, 190), (601, 325, 190), (600, 326, 190), (599, 327, 189), 
(598, 328, 189), (597, 329, 190), (596, 330, 190), (596, 331, 190), (595, 332, 190), (594, 333, 191), (593, 334, 191), 
(592, 335, 191), (591, 336, 192), (590, 337, 192), (589, 338, 192), (589, 339, 192), (588, 340, 192), (587, 341, 192), 
(586, 342, 192), (585, 343, 192), (584, 344, 192), (583, 345, 193), (582, 346, 193), (582, 347, 193), (581, 348, 193), 
(580, 349, 193), (579, 350, 193), (578, 351, 193), (577, 352, 193), (576, 353, 193), (576, 354, 193), (575, 354, 194), 
(574, 355, 194), (573, 356, 194), 
(572, 357, 194), (571, 357, 194), (570, 358, 194), (569, 359, 194), (568, 360, 195), (567, 360, 195), (566, 361, 195), 
(565, 362, 195), (564, 363, 195), (563, 363, 195), (562, 364, 195), (561, 365, 195), (560, 366, 195), (559, 366, 196), 
(558, 367, 196), (557, 368, 196), (556, 369, 196), (555, 369, 196), (554, 370, 197), (553, 371, 197), (552, 372, 197), 
(551, 372, 197), (550, 373, 197), (549, 374, 197), (548, 375, 197), (547, 375, 197), (546, 376, 197), (545, 377, 197), 
(544, 378, 197), (543, 378, 198), (542, 379, 198), (541, 380, 198), (540, 381, 198), (539, 381, 198), (538, 382, 198), 
(537, 383, 198), (536, 384, 198), (535, 384, 199), (534, 385, 199), (533, 386, 199), (532, 387, 199), (531, 387, 199), 
(530, 388, 199), (529, 389, 199), (528, 390, 199), (527, 391, 200), (526, 391, 200), (525, 391, 200), (524, 392, 200), 
(523, 392, 201), (522, 393, 201), (521, 393, 201), (520, 394, 201), (519, 394, 201), (518, 395, 201), (517, 395, 201), 
(516, 396, 201), (515, 396, 202), (514, 397, 202), (513, 397, 202), (512, 397, 202), (511, 398, 202), (510, 398, 202), 
(509, 399, 202), (508, 399, 202), (507, 400, 202), (506, 400, 202), (505, 401, 202), (504, 401, 202), (503, 402, 203), 
(502, 402, 203), (501, 403, 203), (500, 
403, 203), (499, 404, 203), (498, 404, 203), (497, 404, 203), (496, 405, 203), (495, 405, 204), (494, 406, 204), (493, 406, 204), 
(492, 407, 204), (491, 407, 204), (490, 408, 205), (489, 408, 205), (488, 409, 205), (487, 409, 204), (486, 410, 204), 
(485, 410, 205), (484, 410, 205), (483, 411, 205), (482, 411, 205), (481, 412, 206), (480, 412, 206), (479, 413, 206), 
(478, 413, 206), (477, 414, 206), (476, 414, 206), (475, 415, 206), (474, 415, 206), (473, 416, 207), (472, 416, 208),
 (471, 417, 207), (470, 417, 207), (469, 417, 207), (468, 417, 207), (467, 417, 207), (466, 418, 207), (465, 418, 207),
  (464, 418, 207), (463, 418, 207), (462, 419, 207), (461, 419, 207), (460, 419, 207), (459, 419, 208), (458, 419, 208),
   (457, 420, 208), (456, 420, 208), (455, 420, 209), (454, 420, 209), (453, 421, 209), (452, 421, 209), (451, 421, 209),
    (450, 421, 209), (449, 422, 209), (448, 422, 209), (447, 422, 210), (446, 422, 210), (445, 422, 210), (444, 423, 210), 
    (443, 423, 210), (442, 423, 210), (441, 423, 210), (440, 424, 210), (439, 424, 209), (438, 424, 210), (437, 424, 210), 
    (436, 424, 210), (435, 425, 210), (434, 425, 211), (433, 425, 211), 
(432, 425, 211), (431, 426, 212), (430, 426, 212), (429, 426, 212), (428, 426, 212), (427, 427, 212), (426, 427, 212), 
(425, 427, 212), (424, 427, 212), (423, 427, 212), (422, 428, 212), (421, 428, 212), (420, 428, 213), (419, 428, 213), 
(418, 429, 213), (417, 429, 214), (416, 429, 214), (415, 429, 213), (414, 430, 213), (413, 430, 213), (412, 430, 214), 
(411, 430, 214), (410, 430, 214), (409, 430, 214), (408, 430, 215), (407, 430, 214), (406, 430, 214), (405, 430, 214), 
(404, 430, 214), (403, 430, 215), (402, 430, 215), (401, 430, 215), (400, 430, 215), (399, 430, 216), (398, 430, 216),
 (397, 430, 216), (396, 430, 216), (395, 430, 216), (394, 430, 216), (393, 430, 216), (392, 430, 216), (391, 430, 216),
  (390, 430, 216), (389, 430, 216), (388, 430, 216), (387, 430, 216), (386, 430, 216), (385, 430, 216), (384, 430, 216), 
  (383, 430, 216), (382, 430, 217), (381, 430, 217), (380, 430, 217), (379, 430, 217), (378, 430, 218), (377, 430, 218), 
  (376, 430, 218), (375, 430, 217), (374, 430, 217), (373, 430, 218), (372, 430, 218), (371, 430, 218), (370, 430, 219), 
  (369, 430, 219), (368, 430, 219)] 
# xyz=np.array(np.random.random((10,3)))
# x=xyz[:,0].tolist()
# print(x)
# y=xyz[:,1].tolist()
# z=(xyz[:,2]*100).tolist()
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
for i in PPP:
    ax.scatter(i[0],i[1],i[2])
plt.show()

# fig = plt.figure()
# ax = fig.add_subplot(111, projection='3d')
# pnt3d=ax.scatter(x,y,z,c=z)
# cbar=plt.colorbar(pnt3d)
# cbar.set_label("Values (units)")
# plt.show()

# black_image = np.zeros((738, 778, 1),np.uint8)
# image = cv2.imread(r'C:\Users\aminb\Desktop\FIBO\Image\Moduel_image\test_field.jpg')

# cv2.line(black_image,(30,600),(30,30),(255,255,255),3)
# points_on_line = np.linspace(,570)
# point = []

# def sampling(x1,y1,x2,y2):
#     dx = x2-x1
#     dy = y2-y1
#     if abs( x1 - x2 ) >= abs( y1 - y2 ):
#         n = int(abs( x1 - x2 ))
#     else:
#         n = int(abs( y1 - y2 )) 
#     dxn = dx/n
#     dyn = dy/n
#     output = []
#     for i in range(n):
#         output.append((int(x1+(i*dxn)),int(y1+(i*dyn))))
#     return output

# for i in sampling(*(664 , 185),*(669 , 140)):
#     cv2.circle(black_image, i, 1, (255,0,0), -1)



# print(points_on_line)
# for p in points_on_line:
#     point.append(tuple(np.int16(p)))

# for p in np.linspace((30,30),(30,600),570):
#     print(p)
#     cv2.circle(black_image, tuple(np.int32(p)), 1, (255,0,0), -1)

# for i in point:
#     cv2.circle(black_image, i , 3, (255, 255, 255), -1)

# cv2.imshow("ppp",black_image)
# cv2.waitKey(0)



    
    