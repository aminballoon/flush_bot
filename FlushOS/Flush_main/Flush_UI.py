# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'testUI2.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets 
import sys
import serial
from time import sleep
import cv2
from math import sqrt
import numpy as np
import glob

from PyQt5.QtGui import QPixmap

from Flush_Image import *
from Flush_Image_Taskbar import *
from Flush_Communication import *
from Flush_Image import *
from Flush_Aruco import *


def Flush_String_To_List(Input):
    Input = Input.replace(" ","").replace("[","").replace("]","").replace(")","))").split("),")
    New_List = []
    for i in Input:
        i = i.replace("))",")")
        New_List.append(eval(i))
    return New_List


def Flush_Reset(PIC):
    PIC.rts = 1
    sleep(4)
    PIC.rts = 0



def Flush_GOTO_Hell():
    # PIC.write((Flush_PositionXY(380,335)))
    PIC.write((Flush_PositionXY(390, 200)))  # Move XY to pick Gripper
    while (PIC.read() != b'\xac'):
        pass
    sleep(0.5)
    PIC.write(Flush_Command(method='Start timer'))
    while (PIC.read() != b'\xac'):
        pass
    while (PIC.read() != b'\xca'):
        pass
    sleep(0.5)
    Arduino.write((Flush_Position_Gripper(70)))
    while (Arduino.read() != b'\xac'):
        pass
    while (Arduino.read() != b'\xca'):
        pass
    sleep(0.2)
    Arduino.write(Flush_Orentation_Gripper(45, method='bytey'))
    while (Arduino.read() != b'\xac'):
        pass
    while (Arduino.read() != b'\xca'):
        pass
    sleep(0.2)
    Arduino.write((Flush_Position_Z(110, 4000)))
    while (Arduino.read() != b'\xac'):
        pass
    while (Arduino.read() != b'\xca'):
        pass
    sleep(0.2)
    Arduino.write((Flush_Position_Gripper(15)))
    while (Arduino.read() != b'\xac'):
        pass
    while (Arduino.read() != b'\xca'):
        pass
    sleep(0.2)
    Arduino.write((Flush_Position_Z(0, 4000)))
    while (Arduino.read() != b'\xac'):
        pass
    while (Arduino.read() != b'\xca'):
        pass


def Flush_GOTO_Abyss(List_of_Position):
    num = 0
    for Position in List_of_Position:
        num += 1
        if Position[1] == 0 and Position[0] == 0:
            Arduino.write(Flush_Position_Z(Position[2], 2500))
            while (Arduino.read() != b'\xac'):
                pass
            while (Arduino.read() != b'\xca'):
                pass
        else:

            PIC.write((Flush_PositionXY(*Position)))
            while (PIC.read() != b'\xac'):
                pass

            PIC.write(Flush_Command(method='Call time'))
            while (PIC.read() != b'\xac'):
                pass

            Time = Decode_Data(PIC.readline())
            print(Time)
            if int(Time) <= 0:
                Time = 2
            
            PIC.write(Flush_Command(method='Start timer'))
            sleep(0.1)
            Arduino.write(Flush_Position_Z(Position[2], Time))
            while (Arduino.read() != b'\xac'):
                pass
            while (PIC.read() != b'\xac'):
                pass
            while (PIC.read() != b'\xca'):
                pass
            while (Arduino.read() != b'\xca'):
                pass

            Arduino.write(Flush_Orentation_Gripper(Position[3], method='bytey'))
            while (Arduino.read() != b'\xac'):
                pass
            while (Arduino.read() != b'\xca'):
                pass

        sleep(2)

class Ui_MainWindow(object):

    def __init__(self):
        self.serP = serial.Serial()
        self.serA = serial.Serial()
        self.COM_PORT_A = ""
        self.COM_PORT_P = ""
        self.port_arduino_value = ""
        self.port_pic_value = ""

        self.posx = 0
        self.posy = 0
        self.posz = 0

        self.port_connected = False

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(689, 605)
        MainWindow.setMinimumSize(QtCore.QSize(310, 605))
        MainWindow.setMaximumSize(QtCore.QSize(1004, 605))
        MainWindow.setStyleSheet("")
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Button_goto_pos = QtWidgets.QPushButton(self.centralwidget)
        self.Button_goto_pos.setGeometry(QtCore.QRect(110, 230, 93, 28))
        self.Button_goto_pos.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Button_goto_pos.setStyleSheet("")
        self.Button_goto_pos.setObjectName("Flush_BOT")
        self.columnView = QtWidgets.QColumnView(self.centralwidget)
        self.columnView.setGeometry(QtCore.QRect(30, 70, 261, 201))
        self.columnView.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.columnView.setStyleSheet("background-color: rgba(149, 206, 255,0.5);\n"
"border-radius: 20px;")
        self.columnView.setObjectName("columnView")
        self.columnView_2 = QtWidgets.QColumnView(self.centralwidget)
        self.columnView_2.setGeometry(QtCore.QRect(30, 280, 261, 261))
        self.columnView_2.setStyleSheet("background-color: rgba(149, 206, 255,0.5);\n"
"border-radius: 20px;")
        self.columnView_2.setObjectName("columnView_2")
        self.Button_sethome = QtWidgets.QPushButton(self.centralwidget)
        self.Button_sethome.setGeometry(QtCore.QRect(100, 500, 121, 28))
        self.Button_sethome.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Button_sethome.setObjectName("Button_sethome")
        self.Button_camera_go = QtWidgets.QPushButton(self.centralwidget)
        self.Button_camera_go.setGeometry(QtCore.QRect(100, 300, 121, 28))
        self.Button_camera_go.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Button_camera_go.setObjectName("Button_camera_go")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(50, 90, 31, 31))
        self.label.setObjectName("label")
        self.columnView_4 = QtWidgets.QColumnView(self.centralwidget)
        self.columnView_4.setGeometry(QtCore.QRect(0, 0, 1021, 581))
        self.columnView_4.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.columnView_4.setStyleSheet("background-color:pink;")
        self.columnView_4.setObjectName("columnView_4")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(100, 10, 101, 71))
        self.frame.setStyleSheet("image:url('lol.png')")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.columnView_3 = QtWidgets.QColumnView(self.centralwidget)
        self.columnView_3.setGeometry(QtCore.QRect(320, 70, 331, 471))
        self.columnView_3.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.columnView_3.setStyleSheet("background-color: rgba(149, 206, 255,0.5);\n"
"border-radius: 20px;")
        self.columnView_3.setObjectName("columnView_3")
        self.Button_run = QtWidgets.QPushButton(self.centralwidget)
        self.Button_run.setGeometry(QtCore.QRect(370, 440, 241, 61))
        self.Button_run.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Button_run.setObjectName("Button_run")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(450, 120, 81, 16))
        self.label_5.setObjectName("label_5")
        self.Para_y = QtWidgets.QTextEdit(self.centralwidget)
        self.Para_y.setGeometry(QtCore.QRect(100, 140, 141, 31))
        self.Para_y.setObjectName("Para_y")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(50, 140, 31, 31))
        self.label_2.setObjectName("label_2")
        self.Para_z = QtWidgets.QTextEdit(self.centralwidget)
        self.Para_z.setGeometry(QtCore.QRect(100, 190, 141, 31))
        self.Para_z.setObjectName("Para_z")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(50, 190, 31, 31))
        self.label_3.setObjectName("label_3")
        self.para_array = QtWidgets.QTextEdit(self.centralwidget)
        self.para_array.setGeometry(QtCore.QRect(370, 160, 241, 261))
        self.para_array.setObjectName("para_array")
        self.Para_x = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.Para_x.setGeometry(QtCore.QRect(100, 90, 141, 31))
        self.Para_x.setObjectName("Para_x")
        self.Button_task_bar = QtWidgets.QPushButton(self.centralwidget)
        self.Button_task_bar.setGeometry(QtCore.QRect(100, 380, 121, 28))
        self.Button_task_bar.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Button_task_bar.setObjectName("Button_task_bar")
        self.Button_path_image = QtWidgets.QPushButton(self.centralwidget)
        self.Button_path_image.setGeometry(QtCore.QRect(100, 420, 121, 28))
        self.Button_path_image.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Button_path_image.setObjectName("Button_path_image")
        self.Button_delete = QtWidgets.QPushButton(self.centralwidget)
        self.Button_delete.setGeometry(QtCore.QRect(100, 340, 121, 28))
        self.Button_delete.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Button_delete.setObjectName("Button_delete")
        self.Button_connect_5 = QtWidgets.QPushButton(self.centralwidget)
        self.Button_connect_5.setGeometry(QtCore.QRect(100, 460, 121, 28))
        self.Button_connect_5.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.Button_connect_5.setText("")
        self.Button_connect_5.setObjectName("Button_connect_5")
        self.columnView_4.raise_()
        self.columnView.raise_()
        self.Button_goto_pos.raise_()
        self.columnView_2.raise_()
        self.Button_sethome.raise_()
        self.Button_camera_go.raise_()
        self.label.raise_()
        self.frame.raise_()
        self.columnView_3.raise_()
        self.Button_run.raise_()
        self.label_5.raise_()
        self.Para_y.raise_()
        self.label_2.raise_()
        self.Para_z.raise_()
        self.label_3.raise_()
        self.para_array.raise_()
        self.Para_x.raise_()
        self.Button_task_bar.raise_()
        self.Button_path_image.raise_()
        self.Button_delete.raise_()
        self.Button_connect_5.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 689, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.Para_x.textChanged.connect(self.updateposX) ##  pirnt update x value if change
        self.Para_y.textChanged.connect(self.updateposY)    ##  pirnt update y value if change
        self.Para_z.textChanged.connect(self.updateposZ)    ##  pirnt update z value if change


        self.para_array.textChanged.connect(self.update_array)  ##print update port array

        self.Button_sethome.clicked.connect(self.set_home_command)  ##ปุ่มส่ง serial ให้ไป set home
        self.Button_goto_pos.clicked.connect(self.go_to_position)   ##ปุ่มส่ง serial ให้ไปตำแหน่งนั้นๆ
        self.Button_camera_go.clicked.connect(self.Flush_Photo_Club)  ##ปุ่มส่ง serial ให้กล้องเริ่มถ่าย
        self.Button_run.clicked.connect(self.run_to_mission)    ##ปุ่มส่ง serial array ของ path

        self.Button_delete.clicked.connect(self.Delete_obstacle)    
        self.Button_path_image.clicked.connect(self.Path)    
        self.Button_task_bar.clicked.connect(self.Taskbar)    

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Button_goto_pos.setText(_translate("MainWindow", "Go to position"))
        self.Button_sethome.setText(_translate("MainWindow", "Set Home"))
        self.Button_camera_go.setText(_translate("MainWindow", "Camera go"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt;\">B:</span></p></body></html>"))
        self.Button_run.setText(_translate("MainWindow", "RUN"))
        self.label_5.setText(_translate("MainWindow", "Position array"))
        self.Para_y.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt;\">L:</span></p></body></html>"))
        self.Para_z.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label_3.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt;\">P:</span></p></body></html>"))
        self.Button_task_bar.setText(_translate("MainWindow", "Task bar"))
        self.Button_path_image.setText(_translate("MainWindow", "PATH Image"))
        self.Button_delete.setText(_translate("MainWindow", "Delete obstacle"))

    def updateposX(self):                               ##แค่่ฟังชัน print ค่าที่ input ให้เป็น str เฉยๆ
        self.input_x = str(self.Para_x.toPlainText())
        print("Serial X value :", str(self.input_x))

    def updateposY(self):                               ##แค่่ฟังชัน print ค่าที่ input ให้เป็น str เฉยๆ
        self.input_y = str(self.Para_y.toPlainText())
        print("Serial Y value :", str(self.input_y))

    def updateposZ(self):                               ##แค่่ฟังชัน print ค่าที่ input ให้เป็น str เฉยๆ
        self.input_z = str(self.Para_z.toPlainText())
        print("Serial Z value :", str(self.input_z))

    def update_comport_arduino(self):                               ##แค่่ฟังชัน print ค่าที่ input ให้เป็น str เฉยๆ
        self.port_arduino_value = str(self.port_arduino_input.toPlainText())
        print("Serial Port arduino:", str(self.port_arduino_value))

    def update_comport_pic(self):                               ##แค่่ฟังชัน print ค่าที่ input ให้เป็น str เฉยๆ
        self.port_pic_value = str(self.port_pic_input.toPlainText())
        print("Serial Port pic :", str(self.port_pic_value))

    def update_array(self):                               ##แค่่ฟังชัน print ค่าที่ input ให้เป็น str เฉยๆ
        self.para_array_input = str(self.para_array.toPlainText())
        print("Serial Array :", str(self.para_array_input))



    def set_home_command(self):                             ##ฟังชันส่ง serial ไป set home   ******* protocal ไม่ใช่ของเรา *******
        PIC.rts = 1
        # PIC.write(0)
        sleep(0.1)
        PIC.rts = 0
        PIC.read()
        
    def Flush_Photo_Club(self):
        List_of_Position_Camera = [
            (365, 50), (365, 150), (365, 250), (365, 350), (365, 100), (365, 200), (365, 300), (365, 400), (300, 400),
            (380, 50), (380, 150), (380, 250), (380, 350), (380, 100), (380, 200), (380, 300), (380, 400),
            (400, 50), (400, 150), (400, 250), (400, 350), (400, 100), (400, 200), (400, 300), (400, 400),
            (420, 50), (420, 150), (420, 250), (420, 350), (420, 100), (420, 200), (420, 300), (420, 400)]
        num = 0
        for Position in List_of_Position_Camera:
            num += 1
            PIC.write((Flush_PositionXY(*Position)))
            while (PIC.read() != b'\xac'):
                pass
            PIC.write(Flush_Command(method='Start timer'))
            while (PIC.read() != b'\xac'):
                pass
            while (PIC.read() != b'\xca'):
                pass
            if Position != (300, 400):
                Flush_Take_Photo(num)



    def uart1_connect(self):                            ##ฟังชันเชื่อม port
        if not self.port_connected:
            if 'COM' in self.port_pic_value:
                if "COM9"in str(self.port_pic_value):
                    print('PIC Connected:', self.port_pic_value)
                else:
                    print("Warning: Serial Pic Port", self.port_pic_value, "is not connected.")
        else:
            if 'COM' in self.COM_PORT_A:
                print("Warning:", self.COM_PORT_A, "is being opened.")

        #ไว้ connect arduino จะใช้ก็ลบออก
        if not self.port_connected:
            if 'COM' in self.port_arduino_value:
                if "COM22"in str(self.port_arduino_value):
                    print('Arduino Connected:', self.port_arduino_value)
                else:
                    print("Warning: Serial Arduino Port", self.port_arduino_value, "is not connected.")
        else:
            if 'COM' in self.COM_PORT_A:
                print("Warning:", self.COM_PORT_A, "is being opened.")

    def go_to_position(self):                   ##ฟังชัน go to position จากการ input x y z    ******* protocal ไม่ใช่ของเรา *******
        # data = serial.to_bytes([0x46, 0x58, high_byte(self.posx), low_byte(self.posx),              ##protocal
        #                             0x5A, high_byte(self.posz), low_byte(self.posz),                ##จะดึงค่าแกน x ใช้ Para_x แทน posx
        #                             0x59, high_byte(self.posy), low_byte(self.posy), 0x53])         ##จะดึงค่าแกน y ใช้ Para_y แทน posy
        # print("X:", self.posx, "Z:", self.posz, "Y:", self.posy)                                    ##จะดึงค่าแกน z ใช้ Para_z แทน posz
        # print("Passcode: ", data)
        # if self.port_connected:
        #     ##self.ser.write(data)              #จะส่งจริงให้ลบออก
        #     print(self.ser.readline().decode())
        # else:
        #     print("Warning: Serial Port", self.COM_PORT, "is not opened.")
        print("Eiei Hello Bello")


    def run_to_mission(self):           ##ดึงค่าจากช่อง input array ใช้ตัวแปร  para_array
        Input = self.para_array_input
        self.List_of_Position = Flush_String_To_List(Input)
        print(self.List_of_Position)
        Flush_GOTO_Hell()
        Flush_GOTO_Abyss(self.List_of_Position)
        return 0
    
    def Delete_obstacle(self):
        Delete_obstacle(r'C:\Users\aminb\Documents\GitHub\flush_bot\FlushOS\Flush_main\Flush_Image\Flush_Take_Photo')
        pass

    def Path(self):
        Image = cv2.imread(self.input_z)
        list_symbol_template = [cv2.imread(file,0) for file in glob.glob(r'C:\Users\aminb\Documents\GitHub\flush_bot\FlushOS\Flush_main\Flush_Image\Flush_Symbol\*.jpg')]
        PATH_Image = Flush_ImageProcessing(Image,list_symbol_template,method = "thining")
        cv2.imshow("PATH_Image",PATH_Image)
        cv2.imwrite("PATH_Image.png",PATH_Image)
        pass

    def Taskbar(self):
        Image = cv2.imread(self.input_z)
        Flush_Taskbar(Image)

        pass

if __name__ == "__main__":
    PIC = serial.Serial(
    port="COM9",
    baudrate=115200,
    timeout=1)

    Arduino = serial.Serial(
        port="COM22",
        baudrate=115200,
        timeout=1)

    PIC.rts = 0
    PIC.read()
    sleep(1)
    Image = cv2.imread(r'C:\Users\aminb\Documents\GitHub\flush_bot\FlushOS\Flush_main\Flush_Image\Flush_Flied_Image\Image_Anti_Obstacle2020_12_13_20_41_47_307173.png')
    pp = cv2.imread(r'C:\Users\aminb\Documents\GitHub\flush_bot\FlushOS\Flush_main\Flush_Image\Flush_Image_UI\54258184_2158772370873790_5074657834801561600_o.jpg')
    cv2.imshow("Balloon",pp)

    print("PIC : " , PIC.isOpen())
    print("Arduino : ", Arduino.isOpen())
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())



